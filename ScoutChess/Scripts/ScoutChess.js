// Generated by IcedCoffeeScript 108.0.9
(function() {
  var assets, boardMargin, coX, coY, gameHeight, gameWidth, images, pieceMoveDuration, r;

  gameHeight = 1080;

  gameWidth = 2000;

  boardMargin = 36;

  coX = 63.625;

  coY = 64.375;

  pieceMoveDuration = 1000;

  r = function(f) {
    return '/Assets/' + f;
  };

  images = {
    board: r('chessboard.jpg')
  };

  assets = {
    audio: {
      music: [r('fetty-wap-trap-queen-instrumental.mp3')]
    },
    images: [images.board],
    sprites: {
      '/Assets/Pieces.png': {
        tile: 64,
        tileh: 64,
        map: {
          pawn_brown: [0, 0],
          rook_brown: [1, 0],
          knight_brown: [2, 0],
          bishop_brown: [3, 0],
          king_brown: [4, 0],
          queen_brown: [5, 0],
          pawn_pink: [0, 1],
          rook_pink: [1, 1],
          knight_pink: [2, 1],
          bishop_pink: [3, 1],
          king_pink: [4, 1],
          queen_pink: [5, 1]
        }
      }
    }
  };

  $(function() {
    Crafty.init(gameWidth, gameHeight, $('#game')[0]);
    return Crafty.scene('loading');
  });

  Crafty.scene('loading', function() {
    return Crafty.load(assets, function() {
      Crafty.e('2D, DOM, Text').text('LOADING....');
      return Crafty.scene('main');
    });
  }, function(e) {
    return {};
  }, function(e) {
    debugger;
  });

  Crafty.scene('main', function() {
    var game, p, _i, _len, _ref, _results;
    Crafty.c('Piece', {
      piece: function(p) {
        var calcX, calcY, self;
        self = this;
        this.requires('2D, DOM, Tween');
        this.requires("" + p.rank + "_" + p.team);
        calcX = function(col) {
          return boardMargin + (coX * p.column());
        };
        calcY = function(row) {
          return boardMargin + (coY * p.row());
        };
        this.x = calcX(p.column());
        this.y = calcY(p.row());
        p.column.subscribe(function(col) {
          return self.tween({
            x: calcX(col)
          }, pieceMoveDuration);
        });
        return p.row.subscribe(function(row) {
          return self.tween({
            y: calcY(row)
          }, pieceMoveDuration);
        });
      }
    });
    Crafty.e('2D, DOM, Image').image(images.board);
    game = new ScoutChess();
    _ref = game.pieces;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(Crafty.e('Piece').piece(p));
    }
    return _results;
  });

}).call(this);
